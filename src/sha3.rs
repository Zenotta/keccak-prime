use crate::{bits_to_rate, keccakf::KeccakF, Hasher, KeccakState};

/// The `SHA3` hash functions defined in [`FIPS-202`].
///
/// [`FIPS-202`]: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
///
/// # Usage
///
/// ```toml
/// [dependencies]
/// tiny-keccak = { version = "2.0.0", features = ["sha3"] }
/// ```
///
/// # Example
///
/// ```
/// # use keccak_prime::{Hasher, Sha3};
/// #
/// # fn main() {
/// #   let input = b"hello world";
/// #   let mut output = [0; 32];
/// #   let mut sha3 = Sha3::v256();
/// #   sha3.update(input);
/// #   sha3.finalize(&mut output);
/// # }
/// ```
#[derive(Clone)]
pub struct Sha3 {
    state: KeccakState<KeccakF>,
}

impl Sha3 {
    const DELIM: u8 = 0x06;

    /// Creates  new [`Sha3`] hasher with a security level of 224 bits.
    ///
    /// [`Sha3`]: struct.Sha3.html
    pub fn v224() -> Sha3 {
        Sha3::new(224)
    }

    /// Creates  new [`Sha3`] hasher with a security level of 256 bits.
    ///
    /// [`Sha3`]: struct.Sha3.html
    pub fn v256() -> Sha3 {
        Sha3::new(256)
    }

    /// Creates  new [`Sha3`] hasher with a security level of 384 bits.
    ///
    /// [`Sha3`]: struct.Sha3.html
    pub fn v384() -> Sha3 {
        Sha3::new(384)
    }

    /// Creates  new [`Sha3`] hasher with a security level of 512 bits.
    ///
    /// [`Sha3`]: struct.Sha3.html
    pub fn v512() -> Sha3 {
        Sha3::new(512)
    }

    fn new(bits: usize) -> Sha3 {
        Sha3 {
            state: KeccakState::new(bits_to_rate(bits), Self::DELIM),
        }
    }

    /// Squeeze the state to the output (256 bits) and apply an extra number of permutations.
    pub fn finalize_with_penalty(self, penalty: u16) -> [u8; 32] {
        self.state.finalize_with_penalty(penalty)
    }
}

impl Hasher for Sha3 {
    fn update(&mut self, input: &[u8]) {
        self.state.update(input);
    }

    fn finalize(self, output: &mut [u8]) {
        self.state.finalize(output);
    }
}

#[cfg(test)]
mod tests {
    use super::Sha3;
    use crate::Hasher;

    #[test]
    fn hash_with_penalty_test_vectors() {
        {
            let k = Sha3::v256();

            let expected = [
                0xa7, 0xff, 0xc6, 0xf8, 0xbf, 0x1e, 0xd7, 0x66, 0x51, 0xc1, 0x47, 0x56, 0xa0, 0x61,
                0xd6, 0x62, 0xf5, 0x80, 0xff, 0x4d, 0xe4, 0x3b, 0x49, 0xfa, 0x82, 0xd8, 0x0a, 0x4b,
                0x80, 0xf8, 0x43, 0x4a,
            ];

            let mut res = [0u8; 32];
            k.finalize(&mut res);

            assert_eq!(res, expected);
        }
        {
            let mut k = Sha3::v256();
            let m = [
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
                0xa3, 0xa3, 0xa3, 0xa3,
            ];
            k.update(&m);

            let expected = [
                0x79, 0xf3, 0x8a, 0xde, 0xc5, 0xc2, 0x03, 0x07, 0xa9, 0x8e, 0xf7, 0x6e, 0x83, 0x24,
                0xaf, 0xbf, 0xd4, 0x6c, 0xfd, 0x81, 0xb2, 0x2e, 0x39, 0x73, 0xc6, 0x5f, 0xa1, 0xbd,
                0x9d, 0xe3, 0x17, 0x87,
            ];

            let mut res = [0u8; 32];
            k.finalize(&mut res);

            assert_eq!(res, expected);
        }
        {
            let k = Sha3::v256();

            let expected = [
                0xe8, 0xc2, 0xfc, 0x5e, 0x54, 0x42, 0x85, 0xa9, 0x1b, 0x84, 0xdf, 0xfe, 0x0b, 0xba,
                0xeb, 0x6f, 0x37, 0x44, 0xaf, 0xe7, 0xc9, 0x65, 0xec, 0xd4, 0xb3, 0x34, 0x18, 0x58,
                0x67, 0xec, 0xeb, 0xf6,
            ];

            assert_eq!(k.finalize_with_penalty(1), expected);
        }
        {
            let mut k = Sha3::v256();
            k.update(&[
                0xc7, 0xeb, 0x0e, 0xb0, 0x0d, 0xbf, 0x9e, 0xe2, 0x77, 0x8f, 0xe8, 0xae, 0xec, 0x01,
                0xe5, 0x19, 0x74, 0xee, 0xfd, 0x1c, 0xdc, 0x53, 0xa5, 0xe5, 0xb1, 0x77, 0xf9, 0x8b,
                0x66, 0x16, 0x57, 0xff, 0x1b, 0x35, 0xf3, 0x4a, 0x84, 0xfe, 0x81, 0x75, 0x25, 0x4c,
                0xfe, 0x0d, 0xcb, 0xd4, 0xf0, 0xae, 0x4e, 0xd4, 0xd7, 0xc6, 0x45, 0x18, 0xc3, 0xe2,
                0x3e, 0x33, 0x9b, 0x4c, 0xbe, 0x48, 0x3e, 0x6f, 0x7d, 0x68, 0x07, 0x50, 0x27, 0xff,
                0x4e, 0x73, 0x5e, 0x90, 0x12, 0xa5, 0xd3, 0xa3, 0xde, 0xa8, 0x0d, 0xb9, 0xab, 0x02,
                0x36, 0x4e, 0x2d, 0xb9, 0xeb, 0xe8, 0xb2, 0x6c, 0x26, 0x05, 0x83, 0x56, 0xac, 0xa6,
                0x2a, 0x92, 0x35, 0xa9, 0x60, 0x1a, 0xda, 0x1b, 0x35, 0xb9, 0x12, 0x17, 0xf4, 0x11,
                0xd2, 0x57, 0xd1, 0x5f, 0x05, 0xcc, 0x70, 0xde, 0x4e, 0xab, 0x7f, 0xd5, 0x79, 0xb5,
                0xf8, 0xed, 0xa7, 0xc0, 0xe0, 0x86, 0xc3, 0xea, 0xcf, 0x86, 0x07, 0x3a, 0x74, 0xa2,
                0x38, 0x18, 0x88, 0x03, 0xe8, 0x15, 0x1c, 0xcb, 0xcc, 0xa2, 0xde, 0x33, 0x84, 0x6a,
                0xc5, 0x37, 0x3f, 0xc7, 0x0a, 0x56, 0xa2, 0xb9, 0x6c, 0xd9, 0x88, 0xff, 0xc1, 0x92,
                0xda, 0x74, 0xe9, 0x35, 0xe3, 0xd7, 0xe5, 0x26, 0xe8, 0x7c, 0x5f, 0x63, 0xfc, 0x75,
                0xde, 0x69, 0x1c, 0x3a, 0xd6, 0xc5, 0x5c, 0xe1, 0x30, 0xa6, 0x3a, 0xf0, 0x2c, 0x22,
                0x4c, 0x9f, 0x37, 0x23, 0x39, 0x6f, 0xb8, 0x23, 0x2d, 0x8f, 0x35, 0xf2, 0xbd, 0x1d,
                0xb7, 0x3a, 0xe1, 0xa7, 0x13, 0xc0, 0xd9, 0x49, 0x67, 0xd1, 0x28, 0xca, 0x1e, 0x76,
                0xcc, 0x1a, 0x9d, 0xce, 0x02, 0xc3, 0x39, 0x83, 0x9b, 0x91, 0xfc, 0x09, 0x3a, 0x7e,
                0x88, 0xaf, 0x99, 0xfd, 0xa7, 0xa5, 0xd3, 0x27, 0x68, 0xb5,
            ]);

            let expected = [
                0x87, 0xdc, 0xe7, 0xd6, 0x62, 0xb7, 0x28, 0xe0, 0xc1, 0x24, 0x74, 0x25, 0x13, 0xa7,
                0x20, 0x16, 0x6c, 0xee, 0x6c, 0x90, 0x40, 0xd0, 0xb9, 0xe4, 0x95, 0xd0, 0x4f, 0xb9,
                0xf7, 0x49, 0x8d, 0x98,
            ];

            assert_eq!(k.finalize_with_penalty(7), expected);
        }
    }
}
